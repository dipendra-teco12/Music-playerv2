<div class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1 class="m-0">Album details</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="/admin/dashboard">Home</a></li>
          <li class="breadcrumb-item active">Dashboard</li>
        </ol>
      </div>
    </div>
  </div>

  <section class="content">
    <style>
      .error-message {
        color: red;
        font-size: 0.9em;
        margin-top: 2px;
        min-height: 1.2em; /* Reserve space for error messages */
        line-height: 1.2;
        display: block;
      }
      
      /* Ensure consistent spacing for form groups */
      .form-group {
        margin-bottom: 1rem;
      }
      
      /* Prevent layout shift when errors appear */
      .form-group .error-message:empty {
        display: block;
      }
    </style>

    <form id="uploadForm" enctype="multipart/form-data" novalidate >
      <div class="card-body">
        <div class="row">
          <div class="col-sm-6">
            <!-- text input -->
            <div class="form-group">
              <label for="albumName"
                >Album Name<span style="color: red">*</span></label
              >
              <input
                type="text"
                class="form-control"
                placeholder="Enter ..."
                name="albumName"
                id="albumName"
                value="<%= song ? song.albumNames : '' %>"
                required
              />
              <div class="error-message" id="albumNameError"></div>
            </div>
          </div>
          <div class="col-sm-6">
            <div class="form-group">
              <label for="albumImage">Album image </label>
              <div class="custom-file">
                <input
                  type="file"
                  class="custom-file-input"
                  id="albumImage"
                  name="albumImage"
                  accept="image/*"
                />
                <label class="custom-file-label" for="albumImage"
                  >Choose file</label
                >
              </div>
              <div class="error-message" id="albumImageError"></div>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-sm-6">
            <!-- text input -->
            <div class="form-group">
              <label for="artistName"
                >Artist Name<span style="color: red">*</span></label
              >
              <input
                type="text"
                class="form-control"
                placeholder="Enter ..."
                name="artistName"
                id="artistName"
                value="<%= song ? song.artistNames : '' %>"
                required
              />
              <div class="error-message" id="artistNameError"></div>
            </div>
          </div>
          <div class="col-sm-6">
            <div class="form-group">
              <label for="artistImage">Artist image</label>
              <div class="custom-file">
                <input
                  type="file"
                  class="custom-file-input"
                  id="artistImage"
                  name="artistImage"
                  accept="image/*"
                />
                <label class="custom-file-label" for="artistImage"
                  >Choose file</label
                >
              </div>
              <div class="error-message" id="artistImageError"></div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-sm-6">
            <!-- text input -->
            <div class="form-group">
              <label for="title"
                >Song title <span style="color: red">*</span></label
              >
              <input
                type="text"
                class="form-control"
                placeholder="Enter ..."
                name="title"
                title="title"
                id="title"
                value="<%= song ? song.title : '' %>"
                required
              />
              <div class="error-message" id="titleError"></div>
            </div>
          </div>

          <div class="col-sm-6">
            <div class="form-group">
              <label for="songImage">Song image</label>
              <div class="custom-file">
                <input
                  type="file"
                  class="custom-file-input"
                  id="songImage"
                  name="songImage"
                  accept="image/*"
                />
                <label class="custom-file-label" for="songImage"
                  >Choose file</label
                >
              </div>
              <div class="error-message" id="songImageError"></div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-sm-6">
            <div class="form-group">
              <label>Genres<span style="color: red">*</span></label>
           <select class="form-control" id="genreSelect" name="genre">
  <option value="">--Select--</option>
  <option value="Classic Song" <%= song && song.genre && song.genre.includes('Classic Song') ? 'selected' : '' %>>Classic Song</option>
  <option value="Rap Song" <%= song && song.genre && song.genre.includes('Rap Song') ? 'selected' : '' %>>Rap Song</option>
  <option value="Pop Song" <%= song && song.genre && song.genre.includes('Pop Song') ? 'selected' : '' %>>Pop Song</option>
  <option value="Rock Song" <%= song && song.genre && song.genre.includes('Rock Song') ? 'selected' : '' %>>Rock Song</option>
</select>
              <div class="error-message" id="genreSelectError"></div>
            </div>
          </div>
          <div class="col-sm-6">
            <div class="form-group">
              <label>Playlist<span style="color: red">*</span></label>
             <select class="form-control" id="playlistSelect" name="playlist">
  <option value="">--Select--</option>
  <option value="Chill Playlist" <%= song && song.playlistNames && song.playlistNames.includes('Chill Playlist') ? 'selected' : '' %>>Chill Playlist</option>
  <option value="Sad Playlist" <%= song && song.playlistNames && song.playlistNames.includes('Sad Playlist') ? 'selected' : '' %>>Sad Playlist</option>
  <option value="Workout Playlist" <%= song && song.playlistNames && song.playlistNames.includes('Workout Playlist') ? 'selected' : '' %>>Workout Playlist</option>
  <option value="Love Playlist" <%= song && song.playlistNames && song.playlistNames.includes('Love Playlist') ? 'selected' : '' %>>Love Playlist</option>
  <option value="Happy Playlist" <%= song && song.playlistNames && song.playlistNames.includes('Happy Playlist') ? 'selected' : '' %>>Happy Playlist</option>
             </select>
              <div class="error-message" id="playlistSelectError"></div>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-sm-6">
            <div class="form-group">
              <label for="Length">Audio Length (seconds)</label>
              <input
                type="number"
                class="form-control"
                id="Length"
                name="length"
                min="0"
                value="<%= song ? song.length : '' %>"
              />
              <div class="error-message" id="LengthError"></div>
            </div>
          </div>
          <div class="col-sm-6">
            <div class="form-group">
              <label for="audioFile"
                >Audio File<span style="color: red">*</span></label
              >
              <div class="custom-file">
                <input
                  type="file"
                  class="form-control custom-file-input"
                  id="audioFile"
                  name="audioFile"
                  accept="audio/*"
                  required
                />
                <label class="custom-file-label" for="audioFile"
                  >Choose file</label
                >
              </div>
              <div class="error-message" id="audioFileError"></div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-sm-6">
            <div class="form-group">
              <label for="releaseDate">Release Date<span style="color: red">*</span></label>
              <input
                type="date"
                class="form-control"
                id="releaseDate"
                name="releaseDate"
                required
                value="<%= song ? song.releaseDate : '' %>"
              />
              <div class="error-message" id="releaseDateError"></div>
            </div>
          </div>
          <div class="col-sm-6">
            <!-- textarea -->
            <div class="form-group">
              <label>Lyrics</label>
              <textarea
                class="form-control"
                rows="3"
                placeholder="Enter ..."
                name="lyrics"
                id="lyrics"
              
              ><%= song ? song.lyrics : '' %></textarea>
              <div class="error-message" id="lyricsError"></div>
              
            </div>
          </div>
        </div>

        <button type="submit" id="submitBtn" class="btn btn-primary">Upload</button>
      </div>
    </form>
  </section>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  


<script>
window.__INITIAL_DATA__ = {
  mode: "<%= mode %>",
  song: <%- JSON.stringify(song || {}) %>
};

$(document).ready(function () {
  // Ensure form doesn't have default submission behavior
  $("#uploadForm").removeAttr("action").removeAttr("method");

  const setError = (id, msg) => $("#" + id + "Error").text(msg || "");

  // Check if we're in edit mode from URL parameters
  const urlParams = new URLSearchParams(window.location.search);
  const songId = urlParams.get('id');
  
  const mode = window.__INITIAL_DATA__.mode || 'create';
  const song = window.__INITIAL_DATA__.song || null;

  if (mode === 'edit' && song) {
    populateFormForEdit(song);
  }

  function populateFormForEdit(song) {
    $("#uploadForm").attr("data-mode", "edit").attr("data-id", song._id || song.id);
    $("#submitBtn").text("Update");

    $("#albumName").val(song.albumName || song.albumNames || '');
    $("#artistName").val(song.artistName || song.artistNames || '');
    $("#title").val(song.title || '');
    $("#Length").val(song.length || '');
    $("#genreSelect").val(song.genre || '');
    $("#playlistSelect").val(song.playlist || song.playlistNames || '');
    $("#lyrics").val(song.lyrics || '');

    if (song.releaseDate) {
      const releaseDate = song.releaseDate.split("T")[0];
      $("#releaseDate").val(releaseDate);
    }

    $("#audioFile").removeAttr("required");
    $("h1.m-0").text("Edit Album Details");
  }

  function validateForm() {
    let valid = true;
    
    // Clear all errors first
    setError("albumName", "");
    setError("artistName", "");
    setError("title", "");
    setError("genreSelect", "");
    setError("playlistSelect", "");
    setError("audioFile", "");
    setError("releaseDate", "");
    setError("Length", "");
    setError("albumImage", "");
    setError("artistImage", "");
    setError("songImage", "");
    setError("lyrics", "");

    // Album Name validation
    const albumName = $("#albumName").val().trim();
    if (!albumName) {
      setError("albumName", "Album name is required.");
      valid = false;
    } else if (albumName.length < 2) {
      setError("albumName", "Album name must be at least 2 characters long.");
      valid = false;
    } else if (albumName.length > 100) {
      setError("albumName", "Album name must not exceed 100 characters.");
      valid = false;
    }

    // Artist Name validation
    const artistName = $("#artistName").val().trim();
    if (!artistName) {
      setError("artistName", "Artist name is required.");
      valid = false;
    } else if (artistName.length < 2) {
      setError("artistName", "Artist name must be at least 2 characters long.");
      valid = false;
    } else if (artistName.length > 100) {
      setError("artistName", "Artist name must not exceed 100 characters.");
      valid = false;
    }

    // Song Title validation
    const title = $("#title").val().trim();
    if (!title) {
      setError("title", "Song title is required.");
      valid = false;
    } else if (title.length < 2) {
      setError("title", "Song title must be at least 2 characters long.");
      valid = false;
    } else if (title.length > 150) {
      setError("title", "Song title must not exceed 150 characters.");
      valid = false;
    }

    // Genre validation
    if (!$("#genreSelect").val()) {
      setError("genreSelect", "Please select a genre.");
      valid = false;
    }

    // Playlist validation
    if (!$("#playlistSelect").val()) {
      setError("playlistSelect", "Please select a playlist.");
      valid = false;
    }

    // Audio File validation - only required in create mode
    const af = $("#audioFile")[0].files[0];
    const mode = $("#uploadForm").attr("data-mode") || "create";
    
    if (mode === "create" && !af) {
      setError("audioFile", "Audio file is required.");
      valid = false;
    } else if (af) {
      if (!af.type.startsWith("audio/")) {
        setError("audioFile", "Please select a valid audio file.");
        valid = false;
      }
      // Check file size (50MB limit)
      if (af.size > 50 * 1024 * 1024) {
        setError("audioFile", "Audio file size must not exceed 50MB.");
        valid = false;
      }

      // Check specific audio formats
      const allowedAudioTypes = [
        "audio/mpeg",
        "audio/mp3",
        "audio/wav",
        "audio/m4a",
        "audio/aac",
        "audio/ogg",
      ];
      if (!allowedAudioTypes.includes(af.type)) {
        setError(
          "audioFile",
          "Please select a valid audio file (MP3, WAV, M4A, AAC, OGG)."
        );
        valid = false;
      }
    }

    // Release Date validation
    const rd = $("#releaseDate").val();
    if (!rd) {
      setError("releaseDate", "Release date is required.");
      valid = false;
    } else {
      const selectedDate = new Date(rd);
      const today = new Date();
      const maxDate = new Date();
      maxDate.setFullYear(today.getFullYear() + 1);
      
      if (selectedDate > maxDate) {
        setError("releaseDate", "Release date cannot be more than 1 year in the future.");
        valid = false;
      }
    }

    // Audio Length validation
    const len = $("#Length").val();
    if (len && (isNaN(len) || len <= 0 || len > 3600)) {
      setError("Length", "Audio length must be a positive number (max 3600 seconds).");
      valid = false;
    }

    // Image file validations
    const imageFields = ["albumImage", "artistImage", "songImage"];
    imageFields.forEach(fieldId => {
      const file = $("#" + fieldId)[0].files[0];
      if (file) {
        // Check file type
        if (!file.type.startsWith("image/")) {
          setError(fieldId, "Please select a valid image file.");
          valid = false;
        }
        // Check file size (5MB limit)
        if (file.size > 5 * 1024 * 1024) {
          setError(fieldId, "Image file size must not exceed 5MB.");
          valid = false;
        }
        // Check specific image formats
        const allowedImageTypes = [
          "image/jpeg",
          "image/jpg",
          "image/png",
          "image/gif",
          "image/webp",
        ];
        if (!allowedImageTypes.includes(file.type)) {
          setError(
            fieldId,
            "Please select a valid image file (JPEG, PNG, GIF, WebP)."
          );
          valid = false;
        }
      }
    });

    // lyrics validation
    const lyrics = $("#lyrics").val();
    if (lyrics && lyrics.length > 500) {
      setError("lyrics", "Lyrics must not exceed 500 characters.");
      valid = false;
    }

    return valid;
  }

  // Clear errors on input
  $("#uploadForm input, #uploadForm select, #uploadForm textarea").on(
    "input change",
    function () {
      const fieldId = this.id;
      setError(fieldId, "");
    }
  );

  // Update custom-file labels on file selection
  $(".custom-file-input").on("change", function () {
    const names = Array.from(this.files)
      .map((f) => f.name)
      .join(", ");
    $(this)
      .siblings(".custom-file-label")
      .text(names || "Choose file");

    // Clear error when file is selected
    const fieldId = this.id;
    setError(fieldId, "");
  });

  // Additional safety: prevent form submission on button click if validation fails
  $("#submitBtn").on("click", function(e) {
    console.log("Submit button clicked"); // Debug log
    // Let the form submit event handler take care of validation
  });

  // Handle form submission
  $("#uploadForm").on("submit", async function (e) {
    e.preventDefault();
    e.stopPropagation();
    
    console.log("Form submitted - validation starting..."); // Debug log
    
    if (!validateForm()) {
      console.log("Validation failed"); // Debug log
      // Scroll to first error
      const firstErrorField = $(".error-message")
        .filter(function () {
          return $(this).text().length > 0;
        })
        .first();
      if (firstErrorField.length) {
        firstErrorField[0].scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      }
      console.log("Validation errors found, form submission stopped"); // Debug log
      return false; // Explicitly return false
    }

    const $btn = $("#submitBtn");
    const mode = $(this).attr("data-mode") || "create";
    
    // Show confirmation modal before proceeding
    const confirmed = typeof showModal === "function"
      ? await new Promise((resolve) => {
          showModal({
            title: mode === "edit" ? "Update Album" : "Upload Album",
            message: mode === "edit" 
              ? "Are you sure you want to update this album?" 
              : "Are you sure you want to upload this album?",
            confirmText: mode === "edit" ? "Update" : "Upload",
            showCancel: true,
            onConfirm: () => resolve(true),
            onCancel: () => resolve(false),
          });
        })
      : confirm(mode === "edit" 
          ? "Are you sure you want to update this album?" 
          : "Are you sure you want to upload this album?");

    if (!confirmed) return;

    // Disable button and show loading state
    $btn.prop("disabled", true).text(mode === "edit" ? "Updating..." : "Uploading...");

    const url = mode === "edit" 
      ? `/admin/update-song/${songId}` 
      : "/admin/addAlbum";
    const method = mode === "edit" ? "put" : "post";

    const formData = new FormData(this);
    
    // Remove any existing genre and playlist entries to avoid duplicates
    formData.delete("genre");
    formData.delete("playlist");
    
    // Set single values for genre and playlist
    formData.set("genre", $("#genreSelect").val());
    formData.set("playlist", $("#playlistSelect").val());

    try {
      const res = await axios({
        url,
        method,
        data: formData,
        headers: { "Content-Type": "multipart/form-data" },
        withCredentials: true,
      });
      
      console.log("Success response received:", res);
      console.log("showModal function available:", typeof showModal);
      
      const successMessage = mode === "edit" ? "Album updated successfully!" : "Album uploaded successfully!";
      
      // Wait a bit to ensure all scripts are loaded, then try to show modal
      setTimeout(() => {
        console.log("Attempting to show success modal...");
        
        if (typeof showModal === "function") {
          console.log("Using global showModal function");
          try {
            showModal({
              title: "Success",
              message: successMessage,
              confirmText: "OK",
              showCancel: false,
              onConfirm: () => {
                console.log("Success modal confirmed");
                if (mode === "edit") {
                  console.log("Redirecting to dashboard...");
                  window.location.href = "/admin/dashboard";
                } else {
                  console.log("Resetting form...");
                  resetForm();
                }
              },
              onCancel: () => {
                console.log("Success modal cancelled (should not happen)");
                if (mode === "edit") {
                  window.location.href = "/admin/dashboard";
                } else {
                  resetForm();
                }
              }
            });
            console.log("showModal called successfully");
          } catch (modalError) {
            console.error("Error calling showModal:", modalError);
            alert(successMessage);
            if (mode === "edit") {
              window.location.href = "/admin/dashboard";
            } else {
              resetForm();
            }
          }
        } else if (typeof window.showModal === "function") {
          console.log("Using window.showModal function");
          try {
            window.showModal({
              title: "Success",
              message: successMessage,
              confirmText: "OK",
              showCancel: false,
              onConfirm: () => {
                console.log("Success modal confirmed");
                if (mode === "edit") {
                  window.location.href = "/admin/dashboard";
                } else {
                  resetForm();
                }
              },
              onCancel: () => {
                console.log("Success modal cancelled");
                if (mode === "edit") {
                  window.location.href = "/admin/dashboard";
                } else {
                  resetForm();
                }
              }
            });
            console.log("window.showModal called successfully");
          } catch (modalError) {
            console.error("Error calling window.showModal:", modalError);
            alert(successMessage);
            if (mode === "edit") {
              window.location.href = "/admin/dashboard";
            } else {
              resetForm();
            }
          }
        } else {
          console.log("No modal function found, using alert");
          alert(successMessage);
          if (mode === "edit") {
            window.location.href = "/admin/dashboard";
          } else {
            resetForm();
          }
        }
      }, 200); // Small delay to ensure everything is ready
      
    } catch (err) {
      console.error("Request failed:", err);
      const msg = err.response?.data?.message || (mode === "edit" ? "Update failed" : "Upload failed");
      
      console.log("Showing error modal");
      
      setTimeout(() => {
        if (typeof showModal === "function") {
          try {
            showModal({
              title: "Error",
              message: msg,
              confirmText: "OK",
              showCancel: false,
              onConfirm: () => {
                console.log("Error modal confirmed, resetting button");
                $btn.prop("disabled", false).text(mode === "edit" ? "Update" : "Upload");
              },
              onCancel: () => {
                console.log("Error modal cancelled");
                $btn.prop("disabled", false).text(mode === "edit" ? "Update" : "Upload");
              }
            });
          } catch (modalError) {
            console.error("Error showing error modal:", modalError);
            alert(msg);
            $btn.prop("disabled", false).text(mode === "edit" ? "Update" : "Upload");
          }
        } else if (typeof window.showModal === "function") {
          try {
            window.showModal({
              title: "Error",
              message: msg,
              confirmText: "OK",
              showCancel: false,
              onConfirm: () => {
                console.log("Error modal confirmed, resetting button");
                $btn.prop("disabled", false).text(mode === "edit" ? "Update" : "Upload");
              },
              onCancel: () => {
                console.log("Error modal cancelled");
                $btn.prop("disabled", false).text(mode === "edit" ? "Update" : "Upload");
              }
            });
          } catch (modalError) {
            console.error("Error showing window error modal:", modalError);
            alert(msg);
            $btn.prop("disabled", false).text(mode === "edit" ? "Update" : "Upload");
          }
        } else {
          alert(msg);
          $btn.prop("disabled", false).text(mode === "edit" ? "Update" : "Upload");
        }
      }, 200);
    }
  });

  function resetForm() {
    try {
      document.getElementById("uploadForm").reset();
      $("#submitBtn").text("Upload").prop("disabled", false);
      $("#uploadForm").removeAttr("data-mode").removeAttr("data-id");
      
      // Reset custom file labels
      $(".custom-file-label").text("Choose file");
      
      // Reset select dropdowns
      $("#genreSelect").val("");
      $("#playlistSelect").val("");
      
      // Clear all error messages
      $(".error-message").text("");
      
      if (typeof fetchAllMusics === 'function') fetchAllMusics();
      if (typeof fetchCounts === 'function') fetchCounts();
    } catch (uiErr) {
      console.warn("Post-upload UI update failed:", uiErr);
    }
  }
});
</script>
