<div class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1 class="m-0">Dashboard</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="#">Home</a></li>
          <li class="breadcrumb-item active">Dashboard v1</li>
        </ol>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-lg-3 col-6">
      <div class="small-box bg-info">
        <div class="inner">
          <h3 id="song-box">0</h3>
          <p>Total Songs</p>
        </div>
        <div class="icon"><i class="fas fa-music"></i></div>
        <a href="/admin/mysongs" class="small-box-footer"
          >More info <i class="fas fa-arrow-circle-right"></i
        ></a>
      </div>
    </div>

    <div class="col-lg-3 col-6">
      <div class="small-box bg-success">
        <div class="inner">
          <h3 id="album-box">0</h3>
          <p>Album</p>
        </div>
        <div class="icon"><i class="fas fa-compact-disc"></i></div>
        <a href="/admin/myAlbums" class="small-box-footer"
          >More info <i class="fas fa-arrow-circle-right"></i
        ></a>
      </div>
    </div>

    <div class="col-lg-3 col-6">
      <div class="small-box bg-warning">
        <div class="inner">
          <h3 id="playlist-box">0</h3>
          <p>Playlist</p>
        </div>
        <div class="icon"><i class="fas fa-th-list"></i></div>
        <a href="/admin/myPlaylist" class="small-box-footer"
          >More info <i class="fas fa-arrow-circle-right"></i
        ></a>
      </div>
    </div>

    <div class="col-lg-3 col-6">
      <div class="small-box bg-danger">
        <div class="inner">
          <h3 id="artist-box">0</h3>
          <p>Artist</p>
        </div>
        <div class="icon">
          <i class="ion ion-person-add"></i>
        </div>

        <a href="/admin/myArtist" class="small-box-footer"
          >More info <i class="fas fa-arrow-circle-right"></i
        ></a>
      </div>
    </div>
  </div>
</div>

<section class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-header">
            <h3 class="card-title">All Songs</h3>
          </div>

          <div class="card-body">
            <table id="songsTable" class="table table-bordered table-striped">
              <thead>
                <tr>
                  <th>Song title</th>
                  <th>Release Date</th>
                  <th>Likes</th>
                  <th>Singer</th>
                  <th>Length</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody id="music-table-body">
                <tr>
                  <td colspan="6" class="text-center">Loading...</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="/plugins/jquery/jquery.min.js"></script>

<style>
  .row-deleting {
    opacity: 0.5;
    pointer-events: none;
  }
</style>

<script>
  let songsTable = null;
  let songsData = []; // Keep track of current songs data

  async function fetchCounts() {
    try {
      const response = await axios.get("/admin/dashboardcount");

      $("#song-box").text(response.data.totalSongs ?? 0);
      $("#album-box").text(response.data.totalAlbums ?? 0);
      $("#playlist-box").text(response.data.totalPlaylists ?? 0);
      $("#artist-box").text(response.data.totalArtists ?? 0);
    } catch (error) {
      console.error("Error fetching counts:", error);

      $("#song-box").text(0);
      $("#album-box").text(0);
      $("#playlist-box").text(0);
      $("#artist-box").text(0);
    }
  }

  function formatLength(seconds) {
    if (!seconds || isNaN(seconds)) return "N/A";
    const mins = Math.floor(seconds / 60);
    const secs = String(seconds % 60).padStart(2, "0");
    return `${mins}:${secs}`;
  }

  function destroyTable() {
    if (songsTable && $.fn.DataTable.isDataTable("#songsTable")) {
      songsTable.destroy();
      songsTable = null;
    }
  }

  function initializeDataTable() {
    destroyTable();

    songsTable = $("#songsTable").DataTable({
      paging: true,
      pageLength: 10,
      lengthChange: true,
      lengthMenu: [5, 10, 25, 50, 100],
      searching: true,
      ordering: true,
      info: true,
      autoWidth: false,
      responsive: true,
      dom: "lfrtip",
      language: {
        search: "Search songs:",
        lengthMenu: "Show _MENU_ songs per page",
        info: "Showing _START_ to _END_ of _TOTAL_ songs",
        infoEmpty: "No songs available",
        infoFiltered: "(filtered from _MAX_ total songs)",
        emptyTable: "No songs found",
        zeroRecords: "No matching songs found",
      },
      columnDefs: [
        { targets: [0, 1, 2, 3, 4], orderable: true },
        { targets: [5], orderable: false },
      ],
    });
  }

  function rebuildTable(musicData) {
    const $tbody = $("#music-table-body");

    destroyTable();
    $tbody.empty();

    if (!musicData.length) {
      // Don't initialize DataTable for empty tables - just show message
      $tbody.html(
        '<tr><td colspan="6" class="text-center">No songs found.</td></tr>'
      );
      return;
    }

    musicData.forEach((song) => {
      const releaseDate = song.releaseDate
        ? song.releaseDate.split("T")[0]
        : "N/A";
      const row = `
        <tr data-song-id="${song._id}">
          <td>${song.title || "Unknown"}</td>
          <td>${releaseDate}</td>
          <td><span class="tag tag-success">${song.likesCount ?? 0}</span></td>
          <td>${song.singer ?? "Unknown"}</td>
          <td>${formatLength(song.length)}</td>
          <td>
            <button type="button" class="btn btn-primary btn-sm edit-btn" data-id="${
              song._id
            }">
              <i class="fas fa-edit"></i>
            </button>
            <button type="button" class="btn btn-danger btn-sm delete-btn" data-id="${
              song._id
            }">
              <i class="fas fa-trash" aria-hidden="true"></i>
            </button>
          </td>
        </tr>
      `;
      $tbody.append(row);
    });

    // Only initialize DataTable if there are songs
    setTimeout(() => {
      initializeDataTable();
    }, 100);
  }

  async function fetchAllMusics() {
    try {
      $("#music-table-body").html(
        "<tr><td colspan='6' class='text-center'>Loading songs...</td></tr>"
      );

      const response = await axios.get("/admin/songs");
      songsData = response.data || [];

      rebuildTable(songsData);
      // console.log("Songs table initialized successfully");
    } catch (error) {
      console.error("‚ùå Failed to fetch songs:", error);
      $("#music-table-body").html(
        '<tr><td colspan="6" class="text-center text-danger">Failed to load songs. Please try again.</td></tr>'
      );
    }
  }

  // Delete handler - completely rebuild table after deletion
  $(document).on("click", ".delete-btn", async function () {
    showModal({
      title: "Delete Song",
      message: "Are you sure you want to delete song?",
      confirmText: "Delete",
      onConfirm: async () => {
        const id = $(this).data("id");
        const $button = $(this);
        const $row = $button.closest("tr");

        if (!id) {
          alert("Invalid song ID");
          return;
        }

        try {
          // Visual feedback
          $button
            .prop("disabled", true)
            .html('<i class="fas fa-spinner fa-spin"></i>');
          $row.addClass("row-deleting");

          // Make delete request
          await axios.delete(`/admin/song/${id}`);

          // Remove from local data array
          songsData = songsData.filter((song) => song._id !== id);

          // Rebuild entire table with updated data
          rebuildTable(songsData);

          // Update counts after successful deletion
          if (typeof fetchCounts === "function") {
            fetchCounts();
          }

          // console.log("Song deleted successfully");
        } catch (error) {
          console.error("Delete failed:", error);
          alert("Failed to delete song. Please try again.");

          // Restore button state on error
          $button.prop("disabled", false).html('<i class="fas fa-trash"></i>');
          $row.removeClass("row-deleting");
        }
      },
    });
  });

  $(document).on("click", ".edit-btn", async function () {
    showModal({
      title: "Edit Song",
      message: "Are you sure you want to edit song?",
      confirmText: "Edit",
      onConfirm: async () => {
        const songId = $(this).data("id");
        if (!songId) {
          alert("Invalid song ID");
          return;
        }

        try {
          // Show loading state on button
          const $button = $(this);
          const originalHtml = $button.html();
          $button
            .prop("disabled", true)
            .html('<i class="fas fa-spinner fa-spin"></i>');

          const response = await axios.get(`/api/song/track/${songId}`);
          const song = response.data;

          if (song.singleTrack === true) {
            window.location.href = `/admin/uploadSong?mode=edit&id=${songId}`;
          } else {
            window.location.href = `/admin/addAlbum?mode=edit&id=${songId}`;
          }
        } catch (error) {
          console.error("Error fetching song data for editing:", error);
          alert("Failed to load song data. Please try again.");

          // Restore button state on error
          $button.prop("disabled", false).html(originalHtml);
        }
      },
    });
  });
  $(document).ready(() => {
    fetchCounts();
    fetchAllMusics();
    setInterval(fetchCounts, 30000);
  });
</script>
