<style>
  .row-deleting {
    opacity: 0.5;
    pointer-events: none;
  }
</style>
<div class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1 class="m-0">Dashboard</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="#">Home</a></li>
          <li class="breadcrumb-item active">Dashboard v1</li>
        </ol>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-lg-3 col-6">
      <div class="small-box bg-info">
        <div class="inner">
          <h3 id="song-box">0</h3>
          <p>Total Songs</p>
        </div>
        <div class="icon"><i class="fas fa-music"></i></div>
        <a href="/admin/mysongs" class="small-box-footer"
          >More info <i class="fas fa-arrow-circle-right"></i
        ></a>
      </div>
    </div>

    <div class="col-lg-3 col-6">
      <div class="small-box bg-success">
        <div class="inner">
          <h3 id="album-box">0</h3>
          <p>Album</p>
        </div>
        <div class="icon"><i class="fas fa-compact-disc"></i></div>
        <a href="/admin/myAlbums" class="small-box-footer"
          >More info <i class="fas fa-arrow-circle-right"></i
        ></a>
      </div>
    </div>

    <div class="col-lg-3 col-6">
      <div class="small-box bg-warning">
        <div class="inner">
          <h3 id="playlist-box">0</h3>
          <p>Playlist</p>
        </div>
        <div class="icon"><i class="fas fa-th-list"></i></div>
        <a href="/admin/myPlaylist" class="small-box-footer"
          >More info <i class="fas fa-arrow-circle-right"></i
        ></a>
      </div>
    </div>

    <div class="col-lg-3 col-6">
      <div class="small-box bg-danger">
        <div class="inner">
          <h3 id="artist-box">0</h3>
          <p>Artist</p>
        </div>
        <div class="icon">
          <i class="ion ion-person-add"></i>
        </div>

        <a href="/admin/myArtist" class="small-box-footer"
          >More info <i class="fas fa-arrow-circle-right"></i
        ></a>
      </div>
    </div>
  </div>
</div>

<section class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-header">
            <h3 class="card-title">All Songs</h3>
          </div>

          <div class="card-body">
            <table id="songsTable" class="table table-bordered table-striped">
              <thead>
                <tr>
                  <th>Song title</th>
                  <th>Release Date</th>
                  <th>Likes</th>
                  <th>Singer</th>
                  <th>Length</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody id="music-table-body">
                <tr>
                  <td colspan="6" class="text-center">Loading...</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="/plugins/jquery/jquery.min.js"></script> -->

<!-- Include jQuery and other scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
  let songsTable = null;

  // Fetch dashboard counts (unchanged)
  async function fetchCounts() {
    try {
      console.log("Fetching dashboard counts...");
      const response = await axios.get("/admin/dashboardcount");

      // Log the response to see the actual structure
      console.log("Dashboard counts response:", response.data);

      // Check if response has the expected structure
      if (response.data) {
        // Try different possible response structures
        const data = response.data;

        // Method 1: Direct properties
        $("#song-box").text(data.totalSongs ?? data.songs ?? 0);
        $("#album-box").text(data.totalAlbums ?? data.albums ?? 0);
        $("#playlist-box").text(data.totalPlaylists ?? data.playlists ?? 0);
        $("#artist-box").text(data.totalArtists ?? data.artists ?? 0);

        console.log("Counts updated successfully");
      } else {
        throw new Error("No data in response");
      }
    } catch (error) {
      console.error("Error fetching counts:", error);
      console.error(
        "Full error details:",
        error.response ? error.response.data : error.message
      );

      // Set all to 0 on error
      $("#song-box").text(0);
      $("#album-box").text(0);
      $("#playlist-box").text(0);
      $("#artist-box").text(0);

      // Optional: Show user-friendly error
      // alert("Could not load dashboard counts. Please refresh the page.");
    }
  }

  // Format song length
  function formatLength(seconds) {
    if (!seconds || isNaN(seconds)) return "N/A";
    const mins = Math.floor(seconds / 60);
    const secs = String(seconds % 60).padStart(2, "0");
    return `${mins}:${secs}`;
  }

  // Initialize DataTable with server-side processing
  function initializeDataTable() {
    if (songsTable) {
      songsTable.destroy();
    }

    songsTable = $("#songsTable").DataTable({
      processing: true,
      serverSide: true,

      ajax: {
        url: "/admin/songs",
        type: "GET",
        data: function (d) {
          // Map DataTable parameters to your API parameters
          const params = {
            page: Math.floor(d.start / d.length) + 1,
            limit: d.length,
            search: d.search.value,
            sortBy: d.columns[d.order[0].column].data || "title",
            sortOrder: d.order[0].dir,
          };

          console.log("DataTable request params:", params);
          return params;
        },

        // This is the crucial part - properly handle the response
        dataSrc: function (response) {
          console.log("DataTable response:", response);

          // Check if response has the expected structure
          if (!response.songs || !response.pagination) {
            console.error("Invalid response structure:", response);
            return [];
          }

          // IMPORTANT: Tell DataTable about pagination info
          response.recordsTotal = response.pagination.totalSongs;
          response.recordsFiltered = response.pagination.totalSongs;

          return response.songs.map((song) => ({
            ...song,
            DT_RowId: `song-${song._id}`,
            DT_RowData: { songId: song._id },
          }));
        },

        error: function (xhr, error, thrown) {
          console.error("DataTable AJAX error:", error);
          console.error("XHR:", xhr);

          // Show user-friendly error
          $("#songsTable tbody").html(`
          <tr>
            <td colspan="6" class="text-center text-danger">
              Failed to load songs. Please <a href="#" onclick="songsTable.ajax.reload()">retry</a> or refresh the page.
            </td>
          </tr>
        `);
        },
      },

      columns: [
        {
          data: "title",
          name: "title",
          render: function (data, type, row) {
            return data || "Unknown";
          },
        },
        {
          data: "releaseDate",
          name: "releaseDate",
          render: function (data, type, row) {
            return data ? data.split("T")[0] : "N/A";
          },
        },
        {
          data: "likesCount",
          name: "likesCount",
          render: function (data, type, row) {
            return `<span class="tag tag-success">${data ?? 0}</span>`;
          },
        },
        {
          data: "singer",
          name: "singer",
          render: function (data, type, row) {
            return data ?? "Unknown";
          },
        },
        {
          data: "length",
          name: "length",
          render: function (data, type, row) {
            return formatLength(data);
          },
        },
        {
          data: null,
          orderable: false,
          searchable: false,
          render: function (data, type, row) {
            return `
            <button type="button" class="btn btn-primary btn-sm edit-btn" data-id="${row._id}">
              <i class="fas fa-edit"></i>
            </button>
            <button type="button" class="btn btn-danger btn-sm delete-btn" data-id="${row._id}">
              <i class="fas fa-trash"></i>
            </button>
          `;
          },
        },
      ],

      pageLength: 10,
      lengthMenu: [5, 10, 25, 50, 100],
      searching: true,
      ordering: true,
      info: true,
      autoWidth: false,
      responsive: true,

      language: {
        search: "Search songs:",
        lengthMenu: "Show _MENU_ songs per page",
        info: "Showing _START_ to _END_ of _TOTAL_ songs",
        infoEmpty: "No songs available",
        infoFiltered: "(filtered from _MAX_ total songs)",
        emptyTable: "No songs found",
        zeroRecords: "No matching songs found",
        processing: "Loading songs...",
        loadingRecords: "Loading...",
        paginate: {
          first: "First",
          last: "Last",
          next: "Next",
          previous: "Previous",
        },
      },

      order: [[0, "asc"]],

      rowCallback: function (row, data, index) {
        $(row).attr("data-song-id", data._id);
      },

      drawCallback: function (settings) {
        const api = this.api();
        const pageInfo = api.page.info();

        console.log("Table drawn:", {
          page: pageInfo.page + 1,
          pages: pageInfo.pages,
          recordsTotal: pageInfo.recordsTotal,
          recordsDisplay: pageInfo.recordsDisplay,
        });

        // Hide pagination if no data
        if (pageInfo.recordsTotal === 0) {
          $(".dataTables_paginate").hide();
        } else {
          $(".dataTables_paginate").show();
        }
      },

      // Add these options to handle empty states better
      deferRender: true,
      stateSave: false, // Disable state saving to avoid pagination issues

      // Custom initialization
      initComplete: function (settings, json) {
        console.log("DataTable initialized with data:", json);
      },
    });
  }

  // Delete song handler
  $(document).on("click", ".delete-btn", async function () {
    const songId = $(this).data("id");

    // Use your existing modal function if available, otherwise use confirm
    const confirmed =
      typeof showModal === "function"
        ? await new Promise((resolve) => {
            showModal({
              title: "Delete Song",
              message: "Are you sure you want to delete this song?",
              confirmText: "Delete",
              onConfirm: () => resolve(true),
              onCancel: () => resolve(false),
            });
          })
        : confirm("Are you sure you want to delete this song?");

    if (!confirmed) return;

    const $button = $(this);
    const $row = $button.closest("tr");

    try {
      // Show loading state
      $button
        .prop("disabled", true)
        .html('<i class="fas fa-spinner fa-spin"></i>');
      $row.addClass("row-deleting");

      // Delete song
      await axios.delete(`/admin/song/${songId}`);

      // Refresh the table
       songsTable.ajax.reload(null, false); // Stay on current page


      // Update counts if function exists
      if (typeof fetchCounts === "function") {
        fetchCounts();
      }

      console.log("Song deleted successfully");
    } catch (error) {
      console.error("Delete failed:", error);
      alert("Failed to delete song. Please try again.");

      // Restore button state
      $button.prop("disabled", false).html('<i class="fas fa-trash"></i>');
      $row.removeClass("row-deleting");
    }
  });

  // Edit song handler
  $(document).on("click", ".edit-btn", async function () {
    const songId = $(this).data("id");

    // Use your existing modal function if available, otherwise use confirm
    const confirmed =
      typeof showModal === "function"
        ? await new Promise((resolve) => {
            showModal({
              title: "Edit Song",
              message: "Are you sure you want to edit this song?",
              confirmText: "Edit",
              onConfirm: () => resolve(true),
              onCancel: () => resolve(false),
            });
          })
        : confirm("Are you sure you want to edit this song?");

    if (!confirmed) return;

    const $button = $(this);
    const originalHtml = $button.html();

    try {
      $button
        .prop("disabled", true)
        .html('<i class="fas fa-spinner fa-spin"></i>');

      const response = await axios.get(`/api/song/track/${songId}`);
      const song = response.data;

      if (song.singleTrack === true) {
        window.location.href = `/admin/uploadSong?mode=edit&id=${songId}`;
      } else {
        window.location.href = `/admin/addAlbum?mode=edit&id=${songId}`;
      }
    } catch (error) {
      console.error("Error fetching song data for editing:", error);
      alert("Failed to load song data. Please try again.");
      $button.prop("disabled", false).html(originalHtml);
    }
  });

  // Initialize everything when document is ready
  $(document).ready(function () {
    fetchCounts();
    initializeDataTable();

    // Refresh counts periodically
    setInterval(fetchCounts, 30000);
  });
</script>
