<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Forgot Password</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="/adminlte/css/adminlte.min.css" />
    <link rel="stylesheet" href="/plugins/fontawesome-free/css/all.min.css" />
    <style>
      .error-message {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
        display: block;
      }
      .is-invalid {
        border-color: #dc3545;
      }
      .input-group .is-invalid ~ .input-group-append .input-group-text {
        border-color: #dc3545;
      }
      .success-message {
        color: #28a745;
        font-size: 0.875em;
        margin-top: 0.25rem;
        display: block;
      }
      .countdown {
        color: #6c757d;
        font-size: 0.875em;
        margin-top: 0.25rem;
      }
    </style>
  </head>
  <body class="hold-transition login-page">
    <div class="login-box">
      <div class="login-logo">
        <a href="/"><b>Admin</b>LTE</a>
      </div>

      <div class="card">
        <div class="card-body login-card-body">
          <p class="login-box-msg">
            You forgot your password? Here you can easily retrieve a new
            password.
          </p>

          <!-- Send OTP Section -->
          <form id="send-otp-form" novalidate>
            <div class="input-group mb-3">
              <input
                type="email"
                class="form-control"
                id="email"
                name="email"
                placeholder="Email"
                required
              />
              <div class="input-group-append">
                <div class="input-group-text">
                  <span class="fas fa-envelope"></span>
                </div>
              </div>
            </div>
            <div class="error-message" id="emailError"></div>
            <div class="success-message" id="emailSuccess"></div>
            <div class="row">
              <div class="col-12">
                <button
                  type="submit"
                  id="sendOtpBtn"
                  class="btn btn-primary btn-block"
                >
                  Send OTP
                </button>
              </div>
            </div>
            <div class="countdown" id="resendCountdown"></div>
          </form>

          <!-- Verify OTP Section (hidden initially) -->
          <form
            id="verify-otp-form"
            style="display: none; margin-top: 20px"
            novalidate
          >
            <div class="input-group mb-3">
              <input
                type="text"
                class="form-control"
                id="otp"
                name="otp"
                placeholder="Enter 6-digit OTP"
                maxlength="6"
                required
              />
              <div class="input-group-append">
                <div class="input-group-text">
                  <span class="fas fa-key"></span>
                </div>
              </div>
            </div>
            <div class="error-message" id="otpError"></div>
            <div class="success-message" id="otpSuccess"></div>
            <div class="row">
              <div class="col-12">
                <button
                  type="submit"
                  id="verifyOtpBtn"
                  class="btn btn-primary btn-block"
                >
                  Verify OTP
                </button>
              </div>
            </div>
            <div class="text-center mt-2">
              <button
                type="button"
                id="resendOtpBtn"
                class="btn btn-link btn-sm"
                disabled
              >
                Resend OTP (60s)
              </button>
            </div>
          </form>

          <!-- Reset Password Section (hidden initially) -->
          <form
            id="reset-password-form"
            style="display: none; margin-top: 20px"
            novalidate
          >
            <div class="input-group mb-3">
              <input
                type="password"
                class="form-control"
                id="new-password"
                name="newPassword"
                placeholder="New Password"
                required
              />
              <div class="input-group-append">
                <div class="input-group-text">
                  <span class="fas fa-lock"></span>
                </div>
              </div>
            </div>
            <div class="error-message" id="newPasswordError"></div>

            <div class="input-group mb-3">
              <input
                type="password"
                class="form-control"
                id="confirm-password"
                name="confirmPassword"
                placeholder="Confirm New Password"
                required
              />
              <div class="input-group-append">
                <div class="input-group-text">
                  <span class="fas fa-lock"></span>
                </div>
              </div>
            </div>
            <div class="error-message" id="confirmPasswordError"></div>

            <!-- Password strength indicator
            <div
              class="password-strength mb-3"
              id="passwordStrength"
              style="display: none"
            >
              <small class="text-muted">Password strength:</small>
              <div class="progress" style="height: 5px">
                <div
                  class="progress-bar"
                  id="strengthBar"
                  role="progressbar"
                  style="width: 0%"
                ></div>
              </div>
              <small class="text-muted" id="strengthText"></small>
            </div> -->

            <div class="row">
              <div class="col-12">
                <button
                  type="submit"
                  id="resetPasswordBtn"
                  class="btn btn-primary btn-block"
                >
                  Reset Password
                </button>
              </div>
            </div>
          </form>

          <p class="mt-3 mb-1">
            <a href="/admin">Login</a>
          </p>
          <p class="mb-0">
            <a href="/admin/register" class="text-center"
              >Register a new membership</a
            >
          </p>
        </div>
      </div>
    </div>

    <script src="/plugins/jquery/jquery.min.js"></script>
    <script src="/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/adminlte/js/adminlte.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
      $(document).ready(() => {
        let resendTimer = null;
        let resendCountdown = 0;

        const setError = (id, msg) => {
          const errorElement = $("#" + id + "Error");
          const inputElement = $("#" + id.replace("Error", ""));

          if (msg) {
            errorElement.text(msg).show();
            inputElement.addClass("is-invalid");
          } else {
            errorElement.text("").hide();
            inputElement.removeClass("is-invalid");
          }
        };

        const setSuccess = (id, msg) => {
          const successElement = $("#" + id + "Success");
          if (msg) {
            successElement.text(msg).show();
          } else {
            successElement.text("").hide();
          }
        };

        const clearError = (id) => {
          setError(id, "");
          setSuccess(id, "");
        };

        // Clear errors when user starts typing
        $("#email, #otp, #new-password, #confirm-password").on(
          "input",
          function () {
            clearError(this.id);
          }
        );

        // Email validation
        function validateEmail(email) {
          if (!email) {
            setError("email", "Email is required.");
            return false;
          }

          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(email)) {
            setError("email", "Please enter a valid email address.");
            return false;
          }

          if (email.length > 254) {
            setError("email", "Email address is too long.");
            return false;
          }

          return true;
        }

        // OTP validation
        function validateOTP(otp) {
          if (!otp) {
            setError("otp", "OTP is required.");
            return false;
          }

          if (!/^\d{4}$/.test(otp)) {
            setError("otp", "OTP must be exactly 4 digits.");
            return false;
          }

          return true;
        }

        // Password strength checker
        function checkPasswordStrength(password) {
          let score = 0;
          let feedback = [];

          if (password.length >= 8) score += 1;
          else feedback.push("at least 8 characters");

          if (/[a-z]/.test(password)) score += 1;
          else feedback.push("lowercase letter");

          if (/[A-Z]/.test(password)) score += 1;
          else feedback.push("uppercase letter");

          if (/\d/.test(password)) score += 1;
          else feedback.push("number");

          if (/[^a-zA-Z\d]/.test(password)) score += 1;
          else feedback.push("special character");

          const strength = ["Very Weak", "Weak", "Fair", "Good", "Strong"];
          const colors = [
            "#dc3545",
            "#fd7e14",
            "#ffc107",
            "#20c997",
            "#28a745",
          ];

          return {
            score: score,
            percentage: (score / 5) * 100,
            text: strength[score] || "Very Weak",
            color: colors[score] || "#dc3545",
            feedback: feedback,
          };
        }

        // Password validation
        function validatePassword(password, confirmPassword) {
          let valid = true;

          if (!password) {
            setError("newPassword", "New password is required.");
            valid = false;
          } else {
            const strength = checkPasswordStrength(password);

            if (password.length < 8) {
              setError(
                "newPassword",
                "Password must be at least 8 characters long."
              );
              valid = false;
            } else if (strength.score < 3) {
              setError(
                "newPassword",
                `Password is too weak. Add: ${strength.feedback.join(", ")}.`
              );
              valid = false;
            }
          }

          if (!confirmPassword) {
            setError("confirmPassword", "Please confirm your password.");
            valid = false;
          } else if (password && password !== confirmPassword) {
            setError("confirmPassword", "Passwords do not match.");
            valid = false;
          }

          return valid;
        }

        // Update password strength indicator
        $("#new-password").on("input", function () {
          const password = $(this).val();
          const strengthDiv = $("#passwordStrength");
          const strengthBar = $("#strengthBar");
          const strengthText = $("#strengthText");

          if (password.length > 0) {
            const strength = checkPasswordStrength(password);
            strengthDiv.show();
            strengthBar.css({
              width: strength.percentage + "%",
              "background-color": strength.color,
            });
            strengthText.text(strength.text);
          } else {
            strengthDiv.hide();
          }
        });

        // Resend countdown timer
        function startResendTimer() {
          resendCountdown = 60;
          const resendBtn = $("#resendOtpBtn");

          resendTimer = setInterval(() => {
            resendCountdown--;
            resendBtn
              .text(`Resend OTP (${resendCountdown}s)`)
              .prop("disabled", true);

            if (resendCountdown <= 0) {
              clearInterval(resendTimer);
              resendBtn.text("Resend OTP").prop("disabled", false);
            }
          }, 1000);
        }

        // Auto-format OTP input
        $("#otp").on("input", function () {
          let value = $(this).val().replace(/\D/g, ""); // Only digits
          if (value.length > 6) value = value.slice(0, 6);
          $(this).val(value);
        });

        // Send OTP
        $("#send-otp-form").on("submit", async (e) => {
          e.preventDefault();

          const email = $("#email").val().trim();
          if (!validateEmail(email)) return;

          const sendBtn = $("#sendOtpBtn");
          sendBtn.prop("disabled", true).text("Sending OTP...");

          try {
            const res = await axios.post("/api/auth/forgetpassword", { email });
            setSuccess(
              "email",
              res.data.message || "OTP sent! Please check your email."
            );

            setTimeout(() => {
              $("#send-otp-form").hide();
              $("#verify-otp-form").show();
              $("#otp").focus();
              startResendTimer();
            }, 1500);
          } catch (error) {
            const msg = error.response?.data?.message || "Error sending OTP.";
            if (error.response?.status === 404) {
              setError("email", "No account found with this email address.");
            } else {
              setError("email", msg);
            }
          } finally {
            sendBtn.prop("disabled", false).text("Send OTP");
          }
        });

        // Resend OTP
        $("#resendOtpBtn").on("click", async () => {
          const email = $("#email").val().trim();
          const resendBtn = $("#resendOtpBtn");

          resendBtn.prop("disabled", true).text("Resending...");

          try {
            const res = await axios.post("/api/auth/forgetpassword", { email });
            setSuccess("otp", "New OTP sent successfully!");
            startResendTimer();

            setTimeout(() => setSuccess("otp", ""), 3000);
          } catch (error) {
            setError("otp", "Failed to resend OTP. Please try again.");
          }
        });

        // Verify OTP
        $("#verify-otp-form").on("submit", async (e) => {
          e.preventDefault();

          const email = $("#email").val().trim();
          const otp = $("#otp").val().trim();

          if (!validateOTP(otp)) return;

          const verifyBtn = $("#verifyOtpBtn");
          verifyBtn.prop("disabled", true).text("Verifying...");

          try {
            const res = await axios.post("/api/auth/verifyotp", { email, otp });
            setSuccess("otp", res.data.message || "OTP verified successfully!");

            if (resendTimer) {
              clearInterval(resendTimer);
            }

            setTimeout(() => {
              $("#verify-otp-form").hide();
              $("#reset-password-form").show();
              $("#new-password").focus();
            }, 1500);
          } catch (error) {
            const msg =
              error.response?.data?.message || "OTP verification failed.";
            if (error.response?.status === 400) {
              setError("otp", "Invalid or expired OTP. Please try again.");
            } else {
              setError("otp", msg);
            }
          } finally {
            verifyBtn.prop("disabled", false).text("Verify OTP");
          }
        });

        // Reset Password
        $("#reset-password-form").on("submit", async (e) => {
          e.preventDefault();

          const email = $("#email").val().trim();
          const newPassword = $("#new-password").val();
          const confirmPassword = $("#confirm-password").val();

          if (!validatePassword(newPassword, confirmPassword)) return;

          const resetBtn = $("#resetPasswordBtn");
          resetBtn.prop("disabled", true).text("Resetting Password...");

          try {
            const res = await axios.post("/api/auth/resetPassword", {
              email,
              password: newPassword,
            });

            alert(
              res.data.message ||
                "Password reset successful! You can now login with your new password."
            );
            window.location.href = "/admin"; // Redirect to login
          } catch (error) {
            const msg =
              error.response?.data?.message || "Password reset failed.";

            if (error.response?.status === 400) {
              setError(
                "newPassword",
                "Password reset session expired. Please start over."
              );
            } else {
              alert(msg);
            }
          } finally {
            resetBtn.prop("disabled", false).text("Reset Password");
          }
        });

        // Handle Enter key navigation
        $("#email").on("keypress", function (e) {
          if (e.which === 13) $("#send-otp-form").submit();
        });

        $("#otp").on("keypress", function (e) {
          if (e.which === 13) $("#verify-otp-form").submit();
        });

        $("#new-password, #confirm-password").on("keypress", function (e) {
          if (e.which === 13) $("#reset-password-form").submit();
        });
      });
    </script>
  </body>
</html>
