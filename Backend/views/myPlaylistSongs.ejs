<div class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h3 id="playlist-title" class="mb-2"></h3>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item">
            <a href="/admin/myPlaylist">My Playlist</a>
          </li>
          <li class="breadcrumb-item"><a href="/admin/dashboard">Home</a></li>
          <li class="breadcrumb-item active">Dashboard</li>
        </ol>
      </div>
    </div>
  </div>

  <div class="card">
    <div class="card-header">
      <h3 class="card-title">All Songs</h3>
    </div>

    <div class="card-body">
      <table id="playlistSongsTable" class="table table-bordered table-striped">
        <thead>
          <tr>
            <th>Title</th>
            <th>Release Date</th>
            <th>Likes</th>
            <th>Genre</th>
            <th>Length</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody id="song-table-body">
          <tr>
            <td colspan="6" class="text-center">Loading...</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="/plugins/jquery/jquery.min.js"></script>

  <style>
    .row-deleting {
      opacity: 0.5;
      pointer-events: none;
    }
  </style>

  <script>
    const fmtLen = (secs) => {
      if (!secs || isNaN(secs)) return "N/A";
      const m = Math.floor(secs / 60),
        s = ("0" + (secs % 60)).slice(-2);
      return `${m}:${s}`;
    };

    let playlistTable = null;
    let songsData = []; // Keep track of current songs data

    function destroyTable() {
      if (playlistTable && $.fn.DataTable.isDataTable("#playlistSongsTable")) {
        playlistTable.destroy();
        playlistTable = null;
      }
    }

    function initializeDataTable() {
      destroyTable();

      playlistTable = $("#playlistSongsTable").DataTable({
        paging: true,
        pageLength: 10,
        lengthChange: true,
        lengthMenu: [5, 10, 25, 50, 100],
        searching: true,
        ordering: true,
        info: true,
        autoWidth: false,
        responsive: true,
        dom: "lfrtip",
        language: {
          search: "Search songs:",
          lengthMenu: "Show _MENU_ songs per page",
          info: "Showing _START_ to _END_ of _TOTAL_ songs",
          infoEmpty: "No songs available",
          infoFiltered: "(filtered from _MAX_ total songs)",
          emptyTable: "No songs found in this playlist",
          zeroRecords: "No matching songs found",
        },
        columnDefs: [
          { targets: [0, 1, 2, 3, 4], orderable: true },
          { targets: [5], orderable: false },
        ],
      });
    }

    function rebuildTable(songs, playlistTitle) {
      $("#playlist-title").text("Playlist: " + playlistTitle);
      const $tbody = $("#song-table-body");

      destroyTable();
      $tbody.empty();

      if (!songs.length) {
        // Don't initialize DataTable for empty tables - just show message
        $tbody.html(
          '<tr><td colspan="6" class="text-center">No songs in this playlist.</td></tr>'
        );
        return;
      }

      songs.forEach((s) => {
        const date = s.releaseDate ? s.releaseDate.split("T")[0] : "N/A";
        const row = `
          <tr data-song-id="${s._id}">
            <td>${s.title || "Unknown"}</td>
            <td>${date}</td>
            <td>${s.likesCount ?? 0}</td>
            <td>${s.genre ?? "Unknown"}</td>
            <td>${fmtLen(s.length)}</td>
            <td>
              <button type="button" class="btn btn-primary btn-sm edit-btn" data-id="${
                s._id
              }">
                <i class="fas fa-edit"></i>
              </button>
              <button type="button" class="btn btn-danger btn-sm delete-btn" data-id="${
                s._id
              }">
                <i class="fas fa-trash"></i>
              </button>
            </td>
          </tr>`;
        $tbody.append(row);
      });

      // Only initialize DataTable if there are songs
      setTimeout(() => {
        initializeDataTable();
      }, 100);
    }

    async function fetchPlaylistSongs() {
      const pid = new URLSearchParams(window.location.search).get("playlistId");

      if (!pid) {
        $("#song-table-body").html(
          "<tr><td colspan='6' class='text-center text-danger'>Missing playlistId parameter</td></tr>"
        );
        return;
      }

      try {
        $("#song-table-body").html(
          "<tr><td colspan='6' class='text-center'>Loading songs...</td></tr>"
        );

        const { data } = await axios.get(
          `/admin/api/myPlaylists/songs?playlistId=${pid}`
        );

        songsData = data.songs || [];
        const playlistTitle = data.title || "Unknown Playlist";

        rebuildTable(songsData, playlistTitle);
      } catch (error) {
        console.error("Error fetching playlist songs:", error);
        $("#song-table-body").html(
          "<tr><td colspan='6' class='text-center text-danger'>Error loading songs. Please try again.</td></tr>"
        );
        if (error.response.status == 404) {
          window.location.href = "/admin/error-404";
        } else {
          window.location.href = "/admin/error-500";
        }
      }
    }

    // Delete handler - completely rebuild table after deletion
    // Delete handler - completely rebuild table after deletion
    $(document).on("click", ".delete-btn", async function () {
      showModal({
        title: "Delete Song",
        message: "Are you sure you want to delete song?",
        confirmText: "Delete",
        onConfirm: async () => {
          const id = $(this).data("id");
          const $button = $(this);
          const $row = $button.closest("tr");

          if (!id) {
            alert("Invalid song ID");
            return;
          }

          try {
            // Visual feedback
            $button
              .prop("disabled", true)
              .html('<i class="fas fa-spinner fa-spin"></i>');
            $row.addClass("row-deleting");

            // Make delete request
            await axios.delete(`/admin/song/${id}`);

            // Remove from local data array
            songsData = songsData.filter((song) => song._id !== id);

            // Rebuild entire table with updated data
            rebuildTable(songsData);

            // Update counts after successful deletion
            if (typeof fetchCounts === "function") {
              fetchCounts();
            }

            // console.log("Song deleted successfully");
          } catch (error) {
            console.error("Delete failed:", error);
            alert("Failed to delete song. Please try again.");

            // Restore button state on error
            $button
              .prop("disabled", false)
              .html('<i class="fas fa-trash"></i>');
            $row.removeClass("row-deleting");
          }
        },
      });
    });

    $(document).on("click", ".edit-btn", async function () {
      showModal({
        title: "Edit Song",
        message: "Are you sure you want to edit song?",
        confirmText: "Edit",
        onConfirm: async () => {
          const songId = $(this).data("id");
          if (!songId) {
            alert("Invalid song ID");
            return;
          }

          try {
            // Show loading state on button
            const $button = $(this);
            const originalHtml = $button.html();
            $button
              .prop("disabled", true)
              .html('<i class="fas fa-spinner fa-spin"></i>');

            const response = await axios.get(`/api/song/track/${songId}`);
            const song = response.data;

            if (song.singleTrack === true) {
              window.location.href = `/admin/uploadSong?mode=edit&id=${songId}`;
            } else {
              window.location.href = `/admin/addAlbum?mode=edit&id=${songId}`;
            }
          } catch (error) {
            console.error("Error fetching song data for editing:", error);
            alert("Failed to load song data. Please try again.");

            // Restore button state on error
            $button.prop("disabled", false).html(originalHtml);
          }
        },
      });
    });
    $(document).ready(function () {
      fetchPlaylistSongs();
    });
  </script>
</div>
